#pragma once

#include <string>
#include <iostream>
#include <fstream>

// Just a temporary struct, will replace with a more versatile class
struct Color
{
  double red, green, blue;
  Color()
  {
    red = 0;
    green = 0;
    blue = 0;
  }
  Color(double r, double g, double b)
  {
    red = r;
    green = g;
    blue = b;
  }
};

class Image
{
public:

  Image(uint width, uint height) : m_imgWidth(width), m_imgHeight(height)
  {
    // Initialise an array of Color*
    image = new Color *[m_imgHeight];

    for (uint i = 0; i < m_imgHeight; i++)
      image[i] = new Color[m_imgWidth];
  }

  ~Image()
  {
    for (uint i = 0; i < m_imgHeight; i++)
    {
      delete[] image[i];
    }
    delete[] image;
  }

  inline uint getHeight() const { return m_imgHeight; }
  inline uint getWidth() const { return m_imgWidth; }

  inline void setPixel(uint x, uint y, Color color)
  {
    if ((x > m_imgWidth) || (y>m_imgHeight)) return;
    image[y][x] = color;
  }

  void generateImage(const std::string &filename) const
  {
    std::ofstream imgFile(filename);
    imgFile << "P3\n# Generated by Ava\n";
    imgFile << m_imgWidth << " " << m_imgHeight << "\n255\n";

    // Y axis is inverted so that negative y could point downwards
    for (uint y = m_imgHeight; y > 0; y--)
    {

      for (uint x = 0; x < m_imgWidth; x++)
      {

        Color color = image[y-1][x];

        imgFile << int(color.red * 255) << " " << int(color.green * 255) << " " << int(color.blue * 255) << "\n";
      }
      imgFile << "\n#-----------------------------\n";
    }
  }

private:
  uint m_imgWidth;
  uint m_imgHeight;
  Color **image;
};